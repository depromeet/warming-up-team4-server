plugins {
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'com.google.protobuf' version '0.8.9'
    id 'java'
    id 'idea'
    id 'jacoco'
}

group = 'com.depromeet'
version = '0.0.1'

ext {
    javaVersion = JavaVersion.VERSION_12

    versions = [
            'grpc'                  : '1.+',
            'protobuf'              : '3.+',
            'embedded-redis'        : '0.7.+',
            'spring-boot-grpc'      : '2.5.+',
            'spring-boot-redisson'  : '3.11.+',
            'uuid'                  : '3.2.+',
            'java-jwt'              : '3.+',
            'reactor'               : '3.3.+'
    ]
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// protobuf
sourceSets {
    main {
        proto {
            srcDir 'warming-up-team4-proto'
        }

        java {
            srcDir 'src/main/java'
            srcDir 'src/protobuf/main/java'
            srcDir 'src/protobuf/main/grpc'
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.+'
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.+'
        }
    }

    generatedFilesBaseDir = "$projectDir/src/protobuf"

    generateProtoTasks {
        all()*.plugins {
            grpc { }
        }

        ofSourceSet('main')
    }
}


// jacoco
jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

check.dependsOn jacocoTestReport

test {
    useJUnitPlatform()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Junit
    testImplementation 'org.junit.platform:junit-platform-commons'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'junit', module: 'junit'
    }

    // Spring Boot
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // H2
    runtimeOnly 'com.h2database:h2'

    // Logging
    implementation 'org.slf4j:slf4j-api'
    implementation 'org.slf4j:jcl-over-slf4j'

    implementation 'ch.qos.logback:logback-classic'
    implementation 'ch.qos.logback:logback-core'

    // Protobuf
    implementation(group: 'com.google.protobuf', name: 'protobuf-java', version: versions['protobuf'])

    // gRPC
    implementation(group: 'net.devh', name: 'grpc-server-spring-boot-starter', version: versions['spring-boot-grpc'])

    implementation(group: 'io.grpc', name: 'grpc-netty-shaded', version: versions['grpc'])
    implementation(group: 'io.grpc', name: 'grpc-protobuf', version: versions['grpc'])
    implementation(group: 'io.grpc', name: 'grpc-stub', version: versions['grpc'])

    // Reactor
    implementation(group: 'io.projectreactor', name: 'reactor-core', version: versions['reactor'])
    testImplementation(group: 'io.projectreactor', name: 'reactor-test', version: versions['reactor'])

    // Redisson
//    implementation(group: 'org.redisson', name: 'redisson-spring-boot-starter', version: versions['spring-boot-redisson'])

    // Redis
    implementation(group: 'it.ozimov', name: 'embedded-redis', version: versions['embedded-redis'])

    // UUID
    implementation(group: 'com.fasterxml.uuid', name: 'java-uuid-generator', version: versions['uuid'])

    // JWT
    implementation(group: 'com.auth0', name: 'java-jwt', version: versions['java-jwt'])
}
